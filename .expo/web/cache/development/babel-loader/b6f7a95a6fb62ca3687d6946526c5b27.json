{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AACA,SAAA,UAAA;AASA,IAAMA,cAAc,GAAGC,UAAU,CAAjC,kFAAiC,CAAjC;AAIA,OAAO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC,kBAC3B,UAD2B,EACmB;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAA,UAAA,EAAgB;UACdC,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,KAAAA;QADF,CAAA,MAEO;UACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAPE,CAAA;MAULC,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAA,UAAA,EAAgB;UACdH,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;QADF,CAAA,MAEO;UACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAhBE,CAAA;MAmBLE,IAAI,EAAE,gBAAM;QACV;;QACA,IAAA,UAAA,EAAgB;UACdJ,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;QADF,CAAA,MAEO;UACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MAzBE,CAAA;MA4BLG,GAAG,EAAE,eAAM;QACT;;QACA,IAAA,UAAA,EAAgB;UACdL,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,GAAAA;QADF,CAAA,MAEO;UACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}