{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar BarcodeReader = function () {\n  \"use strict\";\n\n  function BarcodeReader() {\n    _classCallCheck(this, BarcodeReader);\n  }\n\n  _createClass(BarcodeReader, [{\n    key: \"readBarcode\",\n    value: function readBarcode() {\n      var vision, client, fileName, _await$client$textDet, _await$client$textDet2, result, detections;\n\n      return _regeneratorRuntime.async(function readBarcode$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              vision = require('@google-cloud/vision');\n              client = new vision.ImageAnnotatorClient();\n              fileName = './assets/SampleBarcode.jpg';\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(client.textDetection(fileName));\n\n            case 5:\n              _await$client$textDet = _context.sent;\n              _await$client$textDet2 = _slicedToArray(_await$client$textDet, 1);\n              result = _await$client$textDet2[0];\n              detections = result.textAnnotations;\n              console.log('Text:');\n              detections.forEach(function (text) {\n                return console.log(text);\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return BarcodeReader;\n}();","map":{"version":3,"names":["BarcodeReader","vision","require","client","ImageAnnotatorClient","fileName","textDetection","result","detections","textAnnotations","console","log","forEach","text"],"sources":["C:/Users/ES58/Documents/GitHub/2022HCI-giftyClip/ReadBarcode.js"],"sourcesContent":["class BarcodeReader {\r\n    async readBarcode() {\r\n        const vision = require('@google-cloud/vision');\r\n\r\n        // Creates a client\r\n        const client = new vision.ImageAnnotatorClient();\r\n\r\n        /**\r\n         * TODO(developer): Uncomment the following line before running the sample.\r\n         */\r\n        const fileName = './assets/SampleBarcode.jpg';\r\n\r\n        // Performs text detection on the local file\r\n        const [result] = await client.textDetection(fileName);\r\n        const detections = result.textAnnotations;\r\n        console.log('Text:');\r\n        detections.forEach(text => console.log(text));\r\n    }\r\n}"],"mappings":";;;;;;;;IAAMA,a;;;;;;;;;WACF;MAAA;;MAAA;QAAA;UAAA;YAAA;cACUC,MADV,GACmBC,OAAO,CAAC,sBAAD,CAD1B;cAIUC,MAJV,GAImB,IAAIF,MAAM,CAACG,oBAAX,EAJnB;cASUC,QATV,GASqB,4BATrB;cAAA;cAAA,iCAY2BF,MAAM,CAACG,aAAP,CAAqBD,QAArB,CAZ3B;;YAAA;cAAA;cAAA;cAYWE,MAZX;cAaUC,UAbV,GAauBD,MAAM,CAACE,eAb9B;cAcIC,OAAO,CAACC,GAAR,CAAY,OAAZ;cACAH,UAAU,CAACI,OAAX,CAAmB,UAAAC,IAAI;gBAAA,OAAIH,OAAO,CAACC,GAAR,CAAYE,IAAZ,CAAJ;cAAA,CAAvB;;YAfJ;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA"},"metadata":{},"sourceType":"script"}